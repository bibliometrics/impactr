# 1. Preparation---------------------
# Load packages
library(dplyr);library(stringr); library(RCurl);library(redcapAPI)
library(reshape);library(dplyr);library(stringr);library(stringi);
library(purrr);library(tibble);library(readr)
library(REDCapR); library(magrittr)
# ? can't update readr to install library(collaborator)
"%ni%" <- Negate("%in%")

# Load regional lead data
recon_admin <- REDCapR::redcap_read_oneshot(redcap_uri = "https://bistc.redcap.bham.ac.uk/api/",
                                            token = "939C4264A6B6EFDB94E836DF69B362F4",
                                            export_data_access_groups = T,
                                            raw_or_label = "label")$data %>%
  mutate_all(., function(x){ifelse(x=="", NA, x)}) %>%
  mutate(region = factor(redcap_data_access_group, levels=unique(redcap_data_access_group)))

# Output: List of "other" hospitals:
hospital_other <- recon_admin %>%
  select(hospital, hospital_other) %>%
  filter(is.na(hospital_other)==F)

recon_admin <- recon_admin %>%
  mutate(hospital = ifelse(is.na(hospital_other)==F, hospital_other, hospital)) %>%
  select(-hospital_other)

# 
# Load functions
source('~/StarSurg/RECON/recon_users/redcap_user_0_functions.R', echo=TRUE)

# Group variables
var_gen <- c("region", "dag_recon")
var_p1 <- str_split_fixed(names(recon_admin), "_", 4)[,1]=="p1"
var_p2 <- str_split_fixed(names(recon_admin), "_", 4)[,1]=="p2"
var_p3 <- str_split_fixed(names(recon_admin), "_", 4)[,1]=="p3"
var_p4 <- str_split_fixed(names(recon_admin), "_", 4)[,1]=="p4"
var_gil <- str_split_fixed(names(recon_admin), "_", 4)[,2]=="gil"
var_vat <- str_split_fixed(names(recon_admin), "_", 4)[,2]=="vat"
var_gyn <- str_split_fixed(names(recon_admin), "_", 4)[,2]=="gyn"
var_uro <- str_split_fixed(names(recon_admin), "_", 4)[,2]=="uro"
var_c1 <- str_split_fixed(names(recon_admin), "_", 4)[,3]=="c1"
var_c2 <- str_split_fixed(names(recon_admin), "_", 4)[,3]=="c2"
var_c3 <- str_split_fixed(names(recon_admin), "_", 4)[,3]=="c3"
var_jd <- str_split_fixed(names(recon_admin), "_", 4)[,3]=="jd"&str_split_fixed(names(recon_admin), "_", 4)[,4]!="yn"

# Create data collector dataset
recon_collab <- bind_rows(fun_recon_collab(recon_admin, var_gen, var_p1, var_gil, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p1, var_gil, var_c2),
                          fun_recon_collab(recon_admin, var_gen, var_p1, var_gil, var_c3),
                          fun_recon_collab(recon_admin, var_gen, var_p1, var_gil, var_jd),
                          fun_recon_collab(recon_admin, var_gen, var_p1, var_vat, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p1, var_vat, var_c2),
                          fun_recon_collab(recon_admin, var_gen, var_p1, var_vat, var_jd),
                          fun_recon_collab(recon_admin, var_gen, var_p1, var_gyn, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p1, var_gyn, var_c2),
                          fun_recon_collab(recon_admin, var_gen, var_p1, var_gyn, var_jd),
                          fun_recon_collab(recon_admin, var_gen, var_p1, var_uro, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p1, var_uro, var_c2),
                          fun_recon_collab(recon_admin, var_gen, var_p1, var_uro, var_jd),
                          
                          #Period 2
                          fun_recon_collab(recon_admin, var_gen, var_p2, var_gil, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p2, var_gil, var_c2),
                          fun_recon_collab(recon_admin, var_gen, var_p2, var_gil, var_c3),
                          fun_recon_collab(recon_admin, var_gen, var_p2, var_gil, var_jd),
                          fun_recon_collab(recon_admin, var_gen, var_p2, var_vat, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p2, var_vat, var_c2),     
                          fun_recon_collab(recon_admin, var_gen, var_p2, var_vat, var_jd),
                          fun_recon_collab(recon_admin, var_gen, var_p2, var_gyn, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p2, var_gyn, var_c2),
                          fun_recon_collab(recon_admin, var_gen, var_p2, var_gyn, var_jd),
                          fun_recon_collab(recon_admin, var_gen, var_p2, var_uro, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p2, var_uro, var_c2),
                          fun_recon_collab(recon_admin, var_gen, var_p2, var_uro, var_jd),
                          
                          # Period 3
                          fun_recon_collab(recon_admin, var_gen, var_p3, var_gil, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p3, var_gil, var_c2),
                          fun_recon_collab(recon_admin, var_gen, var_p3, var_gil, var_c3),
                          fun_recon_collab(recon_admin, var_gen, var_p3, var_gil, var_jd),
                          fun_recon_collab(recon_admin, var_gen, var_p3, var_vat, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p3, var_vat, var_c2),
                          fun_recon_collab(recon_admin, var_gen, var_p3, var_vat, var_jd),
                          fun_recon_collab(recon_admin, var_gen, var_p3, var_gyn, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p3, var_gyn, var_c2),
                          fun_recon_collab(recon_admin, var_gen, var_p3, var_gyn, var_jd),
                          fun_recon_collab(recon_admin, var_gen, var_p3, var_uro, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p3, var_uro, var_c2),
                          fun_recon_collab(recon_admin, var_gen, var_p3, var_uro, var_jd),
                          
                          # Period 4
                          fun_recon_collab(recon_admin, var_gen, var_p4, var_gil, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p4, var_gil, var_c2),
                          fun_recon_collab(recon_admin, var_gen, var_p4, var_gil, var_c3),
                          fun_recon_collab(recon_admin, var_gen, var_p4, var_gil, var_jd),
                          fun_recon_collab(recon_admin, var_gen, var_p4, var_vat, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p4, var_vat, var_c2),
                          fun_recon_collab(recon_admin, var_gen, var_p4, var_vat, var_jd),
                          fun_recon_collab(recon_admin, var_gen, var_p4, var_gyn, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p4, var_gyn, var_c2),
                          fun_recon_collab(recon_admin, var_gen, var_p4, var_gyn, var_jd),
                          fun_recon_collab(recon_admin, var_gen, var_p4, var_uro, var_c1),
                          fun_recon_collab(recon_admin, var_gen, var_p4, var_uro, var_c2),
                          fun_recon_collab(recon_admin, var_gen, var_p4, var_uro, var_jd)) %>%
  tibble::as_tibble()

# Deduplicate------------------------
# identify repeated orcid
dup_orcid <- recon_collab %>%
  # orcid and email present
  filter(orcid!="0000-0000-0000-0000") %>%
  filter(is.na(email)==F&is.na(orcid)==F) %>%
  
  # exclude repeated periods / teams
  distinct(region, dag_recon, email, orcid, .keep_all = T) %>%
  
  # count duplicate
  group_by(orcid) %>%
  summarise(n = n()) %>%
  filter(n>=2) %>%
  pull(orcid)

# list duplicates (when listed under different people)
final_dup_orcid <- recon_collab %>%
  filter(orcid %in% dup_orcid) %>%
  distinct(email, .keep_all = T) %>%
  add_count(orcid) %>% filter(n>1) %>%
  arrange(orcid) %>% 
  pull(orcid) %>% unique()

# final deduplicate
recon_users <- recon_collab %>%
  # valid orcid and correct orcid present
  filter(orcid %ni% c("0000-0000-0000-0000", final_dup_orcid)) %>%
  
  # orcid and email present
  filter(is.na(email)==F&is.na(orcid)==F) %>%
  
  # exclude repeated periods / teams
  distinct(region, dag_recon, email, orcid, .keep_all = T) %>%
  
  left_join(select(recon_admin, region, dag_recon, hospital,
                   hospital_bolton,approval_yn___1,approval_yn___2), by=c("region", "dag_recon")) %>%
  mutate(audit_yn = factor(ifelse(approval_yn___1=="Unchecked","No",
                                  ifelse(approval_yn___1=="Checked","Yes", NA)), 
                           levels=c("Yes", "No")),
         caldi_yn = factor(ifelse(approval_yn___2=="Unchecked","No",
                                  ifelse(approval_yn___2=="Checked","Yes", NA)), 
                           levels=c("Yes", "No")),
         bolton_yn = factor(ifelse(is.na(hospital_bolton)==T, "No", hospital_bolton),
                            levels=c("Yes", "No"))) %>%
  mutate(active_yn = ifelse(audit_yn=="Yes"&caldi_yn=="Yes", "Yes", "No")) %>%
  group_by(orcid) %>%
  mutate(n_dag = row_number()) %>%
  ungroup(orcid) %>%
  
  # create hospital initials if DAG > 1
  mutate(hospital_initials = sapply(hospital, function(x){x %>%
      gsub("and|of|,|[.]|The", "", .) %>%
      gsub("[^::A-Z::]","", .) %>%
      substr(., 1,3) %>% tolower()})) %>%
  mutate(hospital_initials = ifelse(orcid %in% filter(., n_dag>1)$orcid,
                                    paste0("_", hospital_initials), "")) %>%
  
  # create username from email with hospital initials (if DAG > 1)
  mutate(username = tolower(str_split_fixed(email, "@", 2)[,1])) %>%
  mutate(username =  gsub("_", "",username)) %>%
  mutate(username = paste0("re", hospital_initials, "_", username)) %>%
  
  select(region:email,username, period, active_yn, bolton_yn) %>%
  filter(active_yn=="Yes")

readr::write_csv(recon_users, "~/StarSurg/RECON/recon_shiny/authorship/recon_users.csv")
